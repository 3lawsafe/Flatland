(define set-cell-debug
  (lambda ()
    (let* ((board (make-board 2 1)) 
	   (cell (get-cell board 1 0))) 
      (set-cell cell 1)
      (display (get-cell board 1 0))
      (newline))))

(define position-debug
  (lambda ()
    (let* ((board (make-board 2 2))
	   (c1 (get-cell board 0 0))
	   (c2 (get-cell board 0 1))
	   (c3 (get-cell board 1 0))
	   (c4 (get-cell board 1 1)))
      (display c1)
      (newline)
      (display c2)
      (newline)
      (display c3)
      (newline)
      (display c4)
      (newline))))

(define neighbors-debug
  (lambda ()
    (let* ((board (make-board 3 3))
	   (cell (get-cell board 0 0))
	   (cell2 (get-cell board 1 1)))
      (display (get-neighbors board cell))
      (newline)
      (display (get-neighbors board cell2))
      (newline))))

(define living-neighbors-debug
  (lambda ()
    (let* ((board (make-board 3 3))
	   (cell (get-cell board 1 1)))
      (set-cell (get-cell board 0 0) 1)
      (set-cell (get-cell board 0 1) 1)
      (display (get-living-neighbors board cell))
      (newline))))

(define apply-rule-debug
  (lambda ()
    (let ((board (make-board 4 4))
	  (rule (lambda (cell living)
		  (let ((status (get-status cell)))
		    (cond
		      ((and (> status 0) (< living 2)) (set-cell cell 0))
		      ((and (> status 0) (or (= living 2) (= living 3))) (set-cell cell 1))
		      ((and (> status 0) (> living 3)) (set-cell cell 0))
		      ((and (= status 0) (= living 3)) (set-cell cell 1)))))))
	  (set-cell (get-cell board 1 1) 1)
	  (set-cell (get-cell board 2 1) 1)
	  (set-cell (get-cell board 1 2) 1)
	  (set-cell (get-cell board 2 2) 1)
	  (display (status-list board))
	  (newline)
	  (apply-rule board rule)
	  (display (status-list board))
	  (newline))))
